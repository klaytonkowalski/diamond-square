----------------------------------------------------------------------
-- LICENSE
----------------------------------------------------------------------

-- MIT License

-- Copyright (c) 2021 Klayton Kowalski

-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:

-- The above copyright notice and this permission notice shall be included in all
-- copies or substantial portions of the Software.

-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.

-- https://github.com/klaytonkowalski/diamond-square

----------------------------------------------------------------------
-- DEPENDENCIES
----------------------------------------------------------------------

local h_str = require "example.h_str"

----------------------------------------------------------------------
-- CONSTANTS
----------------------------------------------------------------------

local height_nil = 0
local height_min = 1
local height_max = 16
local height_map_size = 129

----------------------------------------------------------------------
-- PROPERTIES
----------------------------------------------------------------------

go.property("tilesource_1", resource.tile_source("/example/tilesource_1.tilesource"))
go.property("tilesource_2", resource.tile_source("/example/tilesource_2.tilesource"))

local height_map = {}
local random_scalar_max = 1
local random_scalar = 1

----------------------------------------------------------------------
-- FUNCTIONS
----------------------------------------------------------------------

local function draw()
	for i = 1, height_map_size do
		for j = 1, height_map_size do
			tilemap.set_tile("#tilemap", "layer1", j, i, height_map[i][j])
		end
	end
end

local function round(value)
	local result = math.ceil(value) - value >= value - math.floor(value) and math.floor(value) or math.ceil(value)
	return result <= 0 and 1 or result
end

local function random()
	return math.random(-1, 1) * random_scalar
end

local function init_height_map()
	height_map = {}
	for i = 1, height_map_size do
		height_map[i] = {}
		for j = 1, height_map_size do
			height_map[i][j] = height_nil
		end
	end
end

local function diamond_square()
	init_height_map()
	random_scalar = random_scalar_max
	height_map[1][1] = math.random(height_min, height_max)
	height_map[1][height_map_size] = math.random(height_min, height_max)
	height_map[height_map_size][1] = math.random(height_min, height_max)
	height_map[height_map_size][height_map_size] = math.random(height_min, height_max)
	local chunk_size = height_map_size - 1
	while chunk_size > 1 do
		local chunk_size_half = chunk_size * 0.5
		for y = 1, height_map_size - 1, chunk_size do
			for x = 1, height_map_size - 1, chunk_size do
				local sum = height_map[y][x] + height_map[y][x + chunk_size] + height_map[y + chunk_size][x] + height_map[y + chunk_size][x + chunk_size]
				local average = sum * 0.25
				height_map[y + chunk_size_half][x + chunk_size_half] = round(average + random())
			end
		end
		if chunk_size == 2 then return end
		for y = 1, height_map_size - 1, chunk_size_half do
			for x = (y + chunk_size_half) % chunk_size, height_map_size - 1, chunk_size do
				local left = (x - chunk_size_half + height_map_size - 1) % (height_map_size - 1)
				local right = (x + chunk_size_half) % (height_map_size - 1)
				local bottom = (y + chunk_size_half) % (height_map_size - 1)
				local top = (y - chunk_size_half + height_map_size - 1) % (height_map_size - 1)
				local sum = height_map[y][left] + height_map[y][right] + height_map[bottom][x] + height_map[top][x]
				local average = sum * 0.25
				local rand = random()
				height_map[x][y] = round(average + rand)
				if x == 1 then
					height_map[height_map_size][y] = average + rand
				end
				if y == 1 then
					height_map[x][height_map_size] = average + rand
				end
			end
		end
		chunk_size = math.ceil(chunk_size * 0.5)
		random_scalar = math.max(random_scalar * 0.5, 0.1)
	end
end

function init(self)
	msg.post("#", h_str.acquire_input_focus)
	math.randomseed(os.clock() * 100000000000)
	diamond_square()
	draw()
end

function on_input(self, action_id, action)
	if action.pressed then
		if action_id == h_str.button_left then
			diamond_square()
			draw()
		elseif action_id == h_str.one then
			go.set("#tilemap", "tile_source", self.tilesource_1)
		elseif action_id == h_str.two then
			go.set("#tilemap", "tile_source", self.tilesource_2)
		elseif action_id == h_str.three then
			random_scalar_max = random_scalar_max - 1
			if random_scalar_max < 0 then
				random_scalar_max = 0
			else
				msg.post("#gui", h_str.update_random_scalar, { value = random_scalar_max })
				diamond_square()
				draw()
			end
		elseif action_id == h_str.four then
			random_scalar_max = random_scalar_max + 1
			if random_scalar_max > height_max then
				random_scalar_max = height_max
			else
				msg.post("#gui", h_str.update_random_scalar, { value = random_scalar_max })
				diamond_square()
				draw()
			end
		end
	end
end